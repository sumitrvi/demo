import 'utils/comman.dart';
import 'utils/connection.dart';
import 'utils/discoverEvents.dart';
import 'utils/discoverbloc.dart';
import 'package:flutter/material.dart';
import 'package:flutter_google_places/flutter_google_places.dart';
import '../utils/res.dart';
import '../utils/constants.dart';
import 'discover_filterwidgets.dart';
import 'package:google_maps_webservice/places.dart';

class CustomAppbar extends StatefulWidget implements PreferredSizeWidget {
  @override
  _StateCustomAppbar createState() => _StateCustomAppbar();

  GlobalKey<ScaffoldState> scaffoldKey;
  String title;
  double height = 150;
  Function filterRecord, searchRecord,openPlacepicker;

  CustomAppbar(this.scaffoldKey, this.title, this.height, this.filterRecord,
      this.searchRecord,
  {this.openPlacepicker});

  @override
  // TODO: implement preferredSize
  Size get preferredSize => Size.fromHeight(height);
}

class _StateCustomAppbar extends State<CustomAppbar> {
  DiscoverBloc disbloc;

  @override
  void initState() {
    disbloc = DiscoverBloc();
    super.initState();
    // lat: 26.894012, long: 75.747192
  }

  /* @override
  _CustomAppbarState createState() => _CustomAppbarState();*/

  //In order to use any widget as AppBar you must implement PreferredSizeWidget.

/*class _CustomAppbarState extends State<CustomAppbar> {*/
  TextStyle hint_style = const TextStyle(
      color: Colors.grey,
      fontFamily: 'AvenirNext',
      fontWeight: FontWeight.w100,
      fontSize: 17.0);

  TextStyle text_style = const TextStyle(
      color: Colors.white,
      fontFamily: 'AvenirNext',
      fontSize: 40.0,
      fontWeight: FontWeight.w700);

  @override
  Widget build(BuildContext context) {
    return PreferredSize(
        preferredSize: const Size.fromHeight(50),
        child: Container(
            alignment: Alignment.center,
            padding:
                const EdgeInsets.only(left: 15.0, right: 0.0, bottom: 15.0),
            color: Theme.of(context).primaryColor,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              children: <Widget>[
                Row(
                  children: <Widget>[
                    Expanded(
                        child: Text(
                      widget.title,
                      style: text_style,
                    )),
                    IconButton(
                        padding: EdgeInsets.zero,
                        iconSize: 0.0,
                        icon: Image.asset(Res.drawericon),
                        onPressed: () {
                          Scaffold.of(context).openEndDrawer();
                        }),
                  ],
                ),
                Row(
                  children: [
                    widget.title == Constants.discover? Container(
                        width: MediaQuery.of(context).size.width * 0.78,
                        margin: EdgeInsets.only(top: 5.0),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: <Widget>[
                              IconButton(
                                padding: const EdgeInsets.all(15.0),
                                icon: Image.asset(Res.search),
                                onPressed: () {
                                  _showfilter_bottomsheet(context);
                                },
                              ),
                              Expanded(
                                  child: StreamBuilder<String>(
                                    stream: disbloc.seachText,
                                    builder: (context, snapShot) {
                                      return TextField(
                                        textInputAction: TextInputAction.next,
                                        cursorColor: Colors.black,
                                        autofocus: false, style:
                                        const TextStyle(color: Colors.black),
                                        onChanged: (value) {
                                          disbloc.seachTextSink.add(value);
                                          //disbloc.searchChanged(value);
                                        },
                                          onEditingComplete: () {},
                                        onSubmitted: (value) {
                                          List<int> list = new List<int>();
                                          widget.searchRecord(value, list);
//                                      disbloc.counterEventSink.add(searchdiscover());
                                        },
                                        decoration: InputDecoration(
                                          fillColor: Colors.white,
                                          filled: true,
                                          focusedBorder: InputBorder.none,
                                          focusedErrorBorder: InputBorder.none,
                                          hintText: Constants.searchbyplace,
                                          border: InputBorder.none,
                                          hintStyle: hint_style,
                                          contentPadding: EdgeInsets.zero,
                                        ),
                                      );
                                    },
                                  )),
                              IconButton(
                                padding: const EdgeInsets.all(15.0),
                                icon: Image.asset(Res.filter),
                                onPressed: () {
                                  _showfilter_bottomsheet(context);
                                },
                              ),
                            ])):SizedBox(),
                    widget.title == Constants.discover? IconButton(icon:
                    Icon(Icons.map_outlined,color: Colors.white,),
                        iconSize: 36.0,
                        padding: EdgeInsets.zero,
                        onPressed: (){
                          openPlacepicker();

                    }):SizedBox()
                  ],

                ),
              ],
            )));
  }

  void _showfilter_bottomsheet(BuildContext ctx) {
    showModalBottomSheet(
        context: ctx,
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
                topRight: Radius.circular(15.0),
                topLeft: Radius.circular(15.0))),
        backgroundColor: Colors.white,
        builder: (context) {
          return Discover_FilterWidgets(widget.filterRecord);
        });
  }

  void openPlacepicker() async{
    Prediction p = await PlacesAutocomplete.show(
        context: context,
        apiKey: Connection.GooglePlayApi,
        onError: onError,
        mode: Mode.fullscreen,
        language: "en",
        components: [
          new Component(Component.country, "uk"),
          new Component(Component.country, "us"),
          new Component(Component.country, "ind")
        ]);
    if (p != null) {
      _getLatLng(p);
    }
  }


  //get the address from placeId
  void _getLatLng(Prediction prediction) async {
    GoogleMapsPlaces _places =
    new GoogleMapsPlaces(apiKey: Connection.GooglePlayApi); //Same API_KEY as above
    PlacesDetailsResponse detail = await _places.getDetailsByPlaceId(prediction.placeId);
//    setState(() {
      widget.openPlacepicker(detail.result.geometry.location.lat,
          detail.result.geometry.location.lng);
//      addressTxt = prediction.description;
//      latti = detail.result.geometry.location.lat;
//      longgti = detail.result.geometry.location.lng;*//*
//    });
//    print('values ${latitude} ${longitude} $address');
  }

  void onError(PlacesAutocompleteResponse value) {
   // Comman.showSnakBarwithkey(value.errorMessage, _scaffoldKey, Colors.red);
  }

  @override
  void dispose() {
    // TODO: implement dispose
    disbloc.dispose();
    super.dispose();
  }
}
